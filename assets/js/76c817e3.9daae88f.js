(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[339],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return h}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(t),h=r,m=d["".concat(p,".").concat(h)]||d[h]||u[h]||o;return t?a.createElement(m,i(i({ref:n},c),{},{components:t})):a.createElement(m,i({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},47049:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p},default:function(){return c}});var a=t(22122),r=t(19756),o=(t(67294),t(3905)),i={title:"Health Status Check"},l={unversionedId:"end-user/policies/health",id:"end-user/policies/health",isDocsHomePage:!1,title:"Health Status Check",description:"This documentation will introduce how to use health policy to apply periodical",source:"@site/docs/end-user/policies/health.md",sourceDirName:"end-user/policies",slug:"/end-user/policies/health",permalink:"/docs/next/end-user/policies/health",editUrl:"https://github.com/oam-dev/kubevela/edit/master/docs/en/end-user/policies/health.md",version:"current",lastUpdatedBy:"Yue Wang",lastUpdatedAt:1631188195,formattedLastUpdatedAt:"9/9/2021",frontMatter:{title:"Health Status Check"},sidebar:"docs",previous:{title:"Multi-Environment Deployment",permalink:"/docs/next/end-user/policies/envbinding"},next:{title:"Multi Environments",permalink:"/docs/next/end-user/workflow/multi-env"}},p=[{value:"Background",id:"background",children:[]},{value:"Health Policy",id:"health-policy",children:[]}],s={toc:p};function c(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This documentation will introduce how to use ",(0,o.kt)("inlineCode",{parentName:"p"},"health")," policy to apply periodical\nhealth checking to an application."),(0,o.kt)("h2",{id:"background"},"Background"),(0,o.kt)("p",null,"After an application is deployed, users usually want to monitor or observe the\nhealth condition of the running application as well as each components.\nHealth policy decouples health chechking procedure from application workflow\nexecution.\nIt allows to set independent health inspection cycle, such as check every 30s.\nThat helps users to notice as soon as applications turn out unhealthy and\nfollow the diagnosis message to troubleshot."),(0,o.kt)("h2",{id:"health-policy"},"Health Policy"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: app-healthscope-unhealthy\nspec:\n  components:\n    - name: my-server\n      type: webservice\n      properties:\n        cmd:\n          - node\n          - server.js\n        image: oamdev/testapp:v1\n        port: 8080\n      traits:\n        - type: ingress\n          properties:\n            domain: test.my.domain\n            http:\n              "/": 8080\n    - name: my-server-unhealthy\n      type: webservice\n      properties:\n        cmd:\n          - node\n          - server.js\n        image: oamdev/testapp:boom # make it unhealthy\n        port: 8080\n  policies:\n    - name: health-policy-demo\n      type: health\n      properties:\n        probeInterval: 5\n        probeTimeout: 10\n')),(0,o.kt)("p",null,"We apply the sample application including two components, ",(0,o.kt)("inlineCode",{parentName:"p"},"my-server")," is\nsupposed to be healthy while ",(0,o.kt)("inlineCode",{parentName:"p"},"my-server-unhealthy")," is supposed to be unhealthy\n(because of invalid image)."),(0,o.kt)("p",null,"As shown in the sample, a ",(0,o.kt)("inlineCode",{parentName:"p"},"Health")," policy is specified.\n",(0,o.kt)("inlineCode",{parentName:"p"},"Health")," policy accepts two optional properties, ",(0,o.kt)("inlineCode",{parentName:"p"},"probeInterval")," indicating time\nduration between checking (default is 30s) and ",(0,o.kt)("inlineCode",{parentName:"p"},"probeTimeout")," indicating time\nduration before checking timeout (default is 10s)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"...\n  policies:\n    - name: health-policy-demo\n      type: health\n      properties:\n        probeInterval: 5\n        probeTimeout: 10\n...\n")),(0,o.kt)("p",null,"To learn about defining health checking rules, please refer to ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"../../platform-engineers/traits/status"},"Status Write Back")),"."),(0,o.kt)("p",null,"Finally we can observe application health status from its ",(0,o.kt)("inlineCode",{parentName:"p"},"status.services"),".\nHere is a snippet of health status."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"...\n  services:\n  - healthy: false\n    message: 'Ready:0/1 '\n    name: my-server-unhealthy\n    scopes:\n    - apiVersion: core.oam.dev/v1alpha2\n      kind: HealthScope\n      name: health-check\n      namespace: default\n      uid: 93345ca1-70df-4bfd-9e37-d28539cb839f\n    workloadDefinition:\n      apiVersion: apps/v1\n      kind: Deployment\n  - healthy: true\n    message: 'Ready:1/1 '\n    name: my-server\n    scopes:\n    - apiVersion: core.oam.dev/v1alpha2\n      kind: HealthScope\n      name: health-check\n      namespace: default\n      uid: 93345ca1-70df-4bfd-9e37-d28539cb839f\n    traits:\n    - healthy: true\n      message: |\n        No loadBalancer found, visiting by using 'vela port-forward policy-test'\n      type: ingress\n    workloadDefinition:\n      apiVersion: apps/v1\n      kind: Deployment\n  status: running\n...\n\n")))}c.isMDXComponent=!0}}]);