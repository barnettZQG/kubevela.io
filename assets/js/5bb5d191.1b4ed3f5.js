(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[2292],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var l=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),p=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return l.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},m=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,y=m["".concat(s,".").concat(d)]||m[d]||c[d]||r;return n?l.createElement(y,o(o({ref:t},u),{},{components:n})):l.createElement(y,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}m.displayName="MDXCreateElement"},93624:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return i},toc:function(){return s},default:function(){return u}});var l=n(22122),a=n(19756),r=(n(67294),n(3905)),o={title:"Multi-Cluster Application Deploy"},i={unversionedId:"case-studies/multi-cluster",id:"case-studies/multi-cluster",isDocsHomePage:!1,title:"Multi-Cluster Application Deploy",description:"This section will introduce how to use KubeVela for multi-cluster application delivery and why.",source:"@site/docs/case-studies/multi-cluster.md",sourceDirName:"case-studies",slug:"/case-studies/multi-cluster",permalink:"/docs/next/case-studies/multi-cluster",editUrl:"https://github.com/oam-dev/kubevela/edit/master/docs/en/case-studies/multi-cluster.md",version:"current",lastUpdatedBy:"Jianbo Sun",lastUpdatedAt:1631672342,formattedLastUpdatedAt:"9/15/2021",frontMatter:{title:"Multi-Cluster Application Deploy"},sidebar:"docs",previous:{title:"Progressive Rollout with Istio",permalink:"/docs/next/case-studies/canary-blue-green"},next:{title:"Helm",permalink:"/docs/next/end-user/components/helm"}},s=[{value:"Introduction",id:"introduction",children:[]},{value:"Preparation",id:"preparation",children:[]},{value:"Deploy Application to multi cluster",id:"deploy-application-to-multi-cluster",children:[]},{value:"More use cases",id:"more-use-cases",children:[]}],p={toc:s};function u(e){var t=e.components,o=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,l.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This section will introduce how to use KubeVela for multi-cluster application delivery and why."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"There are more and more situations come out that organizations need multi-cluster technology for application delivery:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For scalability, a single Kubernetes cluster has its limit around 5K nodes or less, it is unable to handle the large scale application load."),(0,r.kt)("li",{parentName:"ul"},"For stability/availability, application can deploy in multi-cluster for backup which provides more stability and availability."),(0,r.kt)("li",{parentName:"ul"},"For security, you may need to deploy in different zones/areas as government policy requires.")),(0,r.kt)("p",null,"The following guide will the multi-cluster that helps you easily deploy an application to different environments."),(0,r.kt)("h2",{id:"preparation"},"Preparation"),(0,r.kt)("p",null,"You can simply join an existing cluster into KubeVela by specify it's KubeConfig like below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"vela cluster join <your kubeconfig path>\n")),(0,r.kt)("p",null,"It will use field ",(0,r.kt)("inlineCode",{parentName:"p"},"context.cluster")," in KubeConfig as the cluster name automatically,\nyou can also specify the name by ",(0,r.kt)("inlineCode",{parentName:"p"},"--name")," parameter. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"vela cluster join stage-cluster.kubeconfig --name cluster-staging\nvela cluster join prod-cluster.kubeconfig --name cluster-prod\n")),(0,r.kt)("p",null,"After clusters joined, you could list all clusters managed by KubeVela currently."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ vela cluster list\nCLUSTER         TYPE    ENDPOINT                \ncluster-prod    tls     https://47.88.4.97:6443 \ncluster-staging tls     https://47.88.7.230:6443\n")),(0,r.kt)("p",null,"You can also detach a cluster if you're not using it any more."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"$ vela cluster detach cluster-prod\n")),(0,r.kt)("p",null,"If there's still any application running in the cluster, the command will be rejected."),(0,r.kt)("h2",{id:"deploy-application-to-multi-cluster"},"Deploy Application to multi cluster"),(0,r.kt)("p",null,"KubeVela regards a Kubernetes cluster as an environment, so you can deploy an application into\none or more environments."),(0,r.kt)("p",null,"Below is an example, deploy to a staging environment first, check the application running well,\nand finally promote to production environment."),(0,r.kt)("p",null,"For different environments, the deployment configuration can also have some nuance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: example-app\n  namespace: test\nspec:\n  components:\n    - name: hello-world-server\n      type: webservice\n      properties:\n        image: crccheck/hello-world\n        port: 8000\n      traits:\n        - type: scaler\n          properties:\n            replicas: 1\n    - name: data-worker\n      type: worker\n      properties:\n        image: busybox\n        cmd:\n          - sleep\n          - '1000000'\n  policies:\n    - name: example-multi-env-policy\n      type: env-binding\n      properties:\n        envs:\n          - name: staging\n            placement: # selecting the cluster to deploy to\n              clusterSelector:\n                name: cluster-staging\n            selector: # selecting which component to use\n              components:\n                - hello-world-server\n\n          - name: prod\n            placement:\n              clusterSelector:\n                name: cluster-prod\n            patch: # overlay patch on above components\n              components:\n                - name: hello-world-server\n                  type: webservice\n                  traits:\n                    - type: scaler\n                      properties:\n                        replicas: 3\n\n    - name: health-policy-demo\n      type: health\n      properties:\n        probeInterval: 5\n        probeTimeout: 10\n\n  workflow:\n    steps:\n      # deploy to staging env\n      - name: deploy-staging\n        type: multi-env\n        properties:\n          policy: example-multi-env-policy\n          env: staging\n\n      # manual check\n      - name: manual-approval\n        type: suspend\n\n      # deploy to prod env\n      - name: deploy-prod\n        type: multi-env\n        properties:\n          policy: example-multi-env-policy\n          env: prod\n")),(0,r.kt)("p",null,"After the application deployed, it will run as the workflow steps."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You can refer to ",(0,r.kt)("a",{parentName:"p",href:"../end-user/policies/envbinding"},"Env Binding")," and ",(0,r.kt)("a",{parentName:"p",href:"../end-user/policies/health"},"Health Check")," policy user guide for parameter details.")),(0,r.kt)("p",null,"It will deploy application to staging environment first, you can check the ",(0,r.kt)("inlineCode",{parentName:"p"},"Application")," status by:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get application multi-env-demo -o yaml\n")),(0,r.kt)("p",null,"We can see that the workflow is suspended at ",(0,r.kt)("inlineCode",{parentName:"p"},"manual-approval"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"...\n  status:\n    workflow:\n      ...\n      stepIndex: 2\n      steps:\n      - name: deploy-test-server\n        phase: succeeded\n        resourceRef: {}\n        type: multi-env\n      - name: manual-approval\n        phase: succeeded\n        resourceRef: {}\n        type: suspend\n      suspend: true\n      terminated: false\n")),(0,r.kt)("p",null,"You can also check the health status in the ",(0,r.kt)("inlineCode",{parentName:"p"},"status.service")," field below."),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"resume")," command after everything verified in statging cluster:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ vela workflow resume multi-env-demo\n\nSuccessfully resume workflow: multi-env-demo\n")),(0,r.kt)("p",null,"Recheck the ",(0,r.kt)("inlineCode",{parentName:"p"},"Application")," status:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get application multi-env-demo -o yaml\n")),(0,r.kt)("p",null,"All the step status in workflow is succeeded:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"...\n  status:\n    workflow:\n      ...\n      stepIndex: 3\n      steps:\n      - name: deploy-test-server\n        phase: succeeded\n        resourceRef: {}\n        type: multi-env\n      - name: manual-approval\n        phase: succeeded\n        resourceRef: {}\n        type: suspend\n      - name: deploy-prod-server\n        phase: succeeded\n        resourceRef: {}\n        type: multi-env\n      suspend: false\n      terminated: true\n")),(0,r.kt)("h2",{id:"more-use-cases"},"More use cases"),(0,r.kt)("p",null,"KubeVela can provide many strategies to deploy an application to multiple clusters by composing env-binding policy and workflow steps."),(0,r.kt)("p",null,"You can have a glimpse of how does it work as below:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"alt",src:n(48832).Z})),(0,r.kt)("p",null,"More use cases about the multi cluster application deployment are coming soon."))}u.isMDXComponent=!0},48832:function(e,t,n){"use strict";t.Z=n.p+"assets/images/workflow-multi-env-07254e2a9669d80c655fe110ad02c3d0.png"}}]);