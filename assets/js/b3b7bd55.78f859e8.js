(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[4008],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},53964:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return i},toc:function(){return p},default:function(){return u}});var r=n(22122),a=n(19756),o=(n(67294),n(3905)),s={title:"Data Passing"},i={unversionedId:"end-user/workflow/component-dependency-parameter",id:"version-v1.1/end-user/workflow/component-dependency-parameter",isDocsHomePage:!1,title:"Data Passing",description:"This section will introduce how to pass data between components.",source:"@site/versioned_docs/version-v1.1/end-user/workflow/component-dependency-parameter.md",sourceDirName:"end-user/workflow",slug:"/end-user/workflow/component-dependency-parameter",permalink:"/docs/end-user/workflow/component-dependency-parameter",editUrl:"https://github.com/oam-dev/kubevela/edit/master/docs/en/end-user/workflow/component-dependency-parameter.md",version:"v1.1",lastUpdatedBy:"Lei Zhang (Harry)",lastUpdatedAt:1632276365,formattedLastUpdatedAt:"9/22/2021",frontMatter:{title:"Data Passing"},sidebar:"version-v1.1/docs",previous:{title:"Webhook Notification",permalink:"/docs/end-user/workflow/webhook-notification"},next:{title:"Version Control",permalink:"/docs/end-user/version-control"}},p=[{value:"Inputs and Outputs",id:"inputs-and-outputs",children:[{value:"Outputs",id:"outputs",children:[]},{value:"Inputs",id:"inputs",children:[]}]},{value:"How to use",id:"how-to-use",children:[]},{value:"Expected Outcome",id:"expected-outcome",children:[]}],l={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This section will introduce how to pass data between components."),(0,o.kt)("h2",{id:"inputs-and-outputs"},"Inputs and Outputs"),(0,o.kt)("p",null,"In KubeVela, we can use inputs and outputs in Components to pass data."),(0,o.kt)("h3",{id:"outputs"},"Outputs"),(0,o.kt)("p",null,"Outputs is made of ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"valueFrom"),". Input will use ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," to reference output."),(0,o.kt)("p",null,"We can write ",(0,o.kt)("inlineCode",{parentName:"p"},"valueFrom")," in the following ways:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Fill string value in the field, eg. ",(0,o.kt)("inlineCode",{parentName:"li"},"valueFrom: testString"),"."),(0,o.kt)("li",{parentName:"ol"},"Use expression, eg. ",(0,o.kt)("inlineCode",{parentName:"li"},"valueFrom: output.metadata.name"),". Note that ",(0,o.kt)("inlineCode",{parentName:"li"},"output")," is a built-in field referring to the resource in the component that is rendered and deployed to the cluster."),(0,o.kt)("li",{parentName:"ol"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"+")," to combine above two ways, the computed value will be the result, eg. ",(0,o.kt)("inlineCode",{parentName:"li"},'valueFrom: output.metadata.name + "testString"'),".")),(0,o.kt)("h3",{id:"inputs"},"Inputs"),(0,o.kt)("p",null,"Inputs is made of ",(0,o.kt)("inlineCode",{parentName:"p"},"from")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"parameterKey"),". Input uses ",(0,o.kt)("inlineCode",{parentName:"p"},"from")," to reference output, ",(0,o.kt)("inlineCode",{parentName:"p"},"parameterKey")," is a expression that assigns the value of the input to the corresponding field."),(0,o.kt)("p",null,"eg."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Specify inputs:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"...\n- name: wordpress\n  type: helm\n  inputs:\n    - from: mysql-svc\n      parameterKey: properties.values.externalDatabase.host\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"The field parameterKey specifies the field path of the parameter key in component to be assigned after rendering:")),(0,o.kt)("p",null,"Which means the input value will be passed into the below properties:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"...\n- name: wordpress\n  type: helm\n  properties:\n    values:\n      externalDatabase:\n        host: <input value>\n")),(0,o.kt)("h2",{id:"how-to-use"},"How to use"),(0,o.kt)("p",null,"In the following we will apply a WordPress server with the MySQL address passed from a MySQL component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: wordpress-with-mysql\n  namespace: default\nspec:\n  components:\n    - name: mysql\n      type: helm\n      outputs:\n        # the output is the mysql service address\n        - name: mysql-svc\n          exportKey: output.metadata.name + ".default.svc.cluster.local"\n      properties:\n        repoType: helm\n        url: https://charts.bitnami.com/bitnami\n        chart: mysql\n        version: "8.8.2"\n        values:\n          auth:\n            rootPassword: mypassword\n    - name: wordpress\n      type: helm\n      inputs:\n        # set the host to mysql service address\n        - from: mysql-svc\n          parameterKey: properties.values.externalDatabase.host\n      properties:\n        repoType: helm\n        url: https://charts.bitnami.com/bitnami\n        chart: wordpress\n        version: "12.0.3"\n        values:\n          mariadb:\n            enabled: false\n          externalDatabase:\n            user: root\n            password: mypassword\n            database: mysql\n            port: 3306\n')),(0,o.kt)("h2",{id:"expected-outcome"},"Expected Outcome"),(0,o.kt)("p",null,"The WordPress with MySQL has been successfully applied."))}u.isMDXComponent=!0}}]);