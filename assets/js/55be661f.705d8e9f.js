(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[3670],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?o.createElement(h,i(i({ref:n},c),{},{components:t})):o.createElement(h,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},26594:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l},default:function(){return c}});var o=t(22122),r=t(19756),a=(t(67294),t(3905)),i={title:"Jenkins + KubeVela for CI/CD"},s={unversionedId:"case-studies/jenkins-cicd",id:"case-studies/jenkins-cicd",isDocsHomePage:!1,title:"Jenkins + KubeVela for CI/CD",description:"This section will introduce how to combine KubeVela and Jenkins to do CI (continuous integration) and CD (continuous delivery). The following example is based on the publish process of a simple HTTP server. The code can be found at here.",source:"@site/docs/case-studies/jenkins-cicd.md",sourceDirName:"case-studies",slug:"/case-studies/jenkins-cicd",permalink:"/docs/next/case-studies/jenkins-cicd",editUrl:"https://github.com/oam-dev/kubevela/edit/master/docs/en/case-studies/jenkins-cicd.md",version:"current",lastUpdatedBy:"Somefive",lastUpdatedAt:1630592473,formattedLastUpdatedAt:"9/2/2021",frontMatter:{title:"Jenkins + KubeVela for CI/CD"}},l=[{value:"Preparation",id:"preparation",children:[]},{value:"Combining Jenkins with KubeVela apiserver",id:"combining-jenkins-with-kubevela-apiserver",children:[]},{value:"More",id:"more",children:[]}],p={toc:l};function c(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This section will introduce how to combine KubeVela and Jenkins to do CI (continuous integration) and CD (continuous delivery). The following example is based on the publish process of a simple HTTP server. The code can be found at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Somefive/KubeVela-demo-CICD-app"},"here"),"."),(0,a.kt)("h2",{id:"preparation"},"Preparation"),(0,a.kt)("p",null,"Before combining KubeVela and Jenkins, you need to ensure the following environments have already been set up."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Deploy Jenkins service with Docker support, including related plugins and credentials which will be used to access image repository."),(0,a.kt)("li",{parentName:"ol"},"A git repository with Webhook enabled. Ensure commits to the target branch will trigger the running of Jenkins pipeline."),(0,a.kt)("li",{parentName:"ol"},"Get Kubernetes for deployment. Install KubeVela and enable its apiserver. Ensure the KubeVela apiserver can be accessed from external.")),(0,a.kt)("h2",{id:"combining-jenkins-with-kubevela-apiserver"},"Combining Jenkins with KubeVela apiserver"),(0,a.kt)("p",null,"Deploy Jenkins pipeline with the following Groovy script. You can change the git repository address, image address, apiserver address and other environment configurations on demand. Your git repository should contain the Dockerfile and app.yaml configuration file to tell how to build target image and which component the application contains."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy"},"pipeline {\n    agent any\n    environment {\n        GIT_BRANCH = 'prod'\n        GIT_URL = 'https://github.com/Somefive/KubeVela-demo-CICD-app.git'\n        DOCKER_REGISTRY = 'https://registry.hub.docker.com'\n        DOCKER_CREDENTIAL = 'DockerHubCredential'\n        DOCKER_IMAGE = 'somefive/hello-world:kubevela-demo-cicd-app'\n        APISERVER_URL = 'http://47.88.24.19'\n        APPLICATION_YAML = 'app.yaml'\n        APPLICATION_NAMESPACE = 'kubevela-demo-namespace'\n        APPLICATION_NAME = 'cicd-demo-app'\n    }\n    stages {\n        stage('Prepare') {\n            steps {\n                script {\n                    def checkout = git branch: env.GIT_BRANCH, url: env.GIT_URL\n                    env.GIT_COMMIT = checkout.GIT_COMMIT\n                    env.GIT_BRANCH = checkout.GIT_BRANCH\n                    echo \"env.GIT_BRANCH=${env.GIT_BRANCH},env.GIT_COMMIT=${env.GIT_COMMIT}\"\n                }\n            }\n        }\n        stage('Build') {\n            steps {\n                script {\n                    docker.withRegistry(env.DOCKER_REGISTRY, env.DOCKER_CREDENTIAL) {\n                        def customImage = docker.build(env.DOCKER_IMAGE)\n                        customImage.push()\n                    }\n                }\n            }\n        }\n        stage('Deploy') {\n            steps {\n                sh 'wget -q \"https://github.com/mikefarah/yq/releases/download/v4.12.1/yq_linux_amd64\"'\n                sh 'chmod +x yq_linux_amd64'\n                script {\n                    def app = sh (\n                        script: \"./yq_linux_amd64 eval -o=json '.spec' ${env.APPLICATION_YAML} | sed -e 's/GIT_COMMIT/$GIT_COMMIT/g'\",\n                        returnStdout: true\n                    )\n                    echo \"app: ${app}\"\n                    def response = httpRequest acceptType: 'APPLICATION_JSON', contentType: 'APPLICATION_JSON', httpMode: 'POST', requestBody: app, url: \"${env.APISERVER_URL}/v1/namespaces/${env.APPLICATION_NAMESPACE}/applications/${env.APPLICATION_NAME}\"\n                    println('Status: '+response.status)\n                    println('Response: '+response.content)\n                }\n            }\n        }\n    }\n}\n")),(0,a.kt)("p",null,"Push commits to the target branch in git repository, which the Jenkins pipeline focus on. The Webhook of git repo will trigger the newly created Jenkins pipeline. This pipeline will automatically build container images and push it to the image repository. Then it will send POST request to KubeVela apiserver, which will deploy app.yaml to Kubernetes cluster. A example of app.yaml is shown below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: kubevela-demo-app\nspec:\n  components:\n    - name: kubevela-demo-app-web\n      type: webservice\n      properties:\n        image: somefive/kubevela-demo-cicd-app\n        imagePullPolicy: Always\n        port: 8080\n      traits:\n        - type: rollout\n          properties:\n            rolloutBatches:\n              - replicas: 2\n              - replicas: 3\n            batchPartition: 0\n            targetSize: 5\n        - type: labels\n          properties:\n            jenkins-build-commit: GIT_COMMIT\n        - type: ingress\n          properties:\n            domain: <your domain>\n            http:\n              "/": 8088\n')),(0,a.kt)("p",null,"THe GIT_COMMIT identifier will be replaced by git commit id in Jenkins pipeline. You can check the deployment status in Kubernetes through kubectl."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get app -n kubevela-demo-namespace   \nNAME            COMPONENT               TYPE         PHASE     HEALTHY   STATUS   AGE\ncicd-demo-app   kubevela-demo-app-web   webservice   running   true               102s\n$ kubectl get deployment -n kubevela-demo-namespace\nNAME                       READY   UP-TO-DATE   AVAILABLE   AGE\nkubevela-demo-app-web-v1   2/2     2            2           111s\n$ kubectl get ingress -n kubevela-demo-namespace \nNAME                    CLASS    HOSTS                                                                                 ADDRESS          PORTS   AGE\nkubevela-demo-app-web   <none>   <your domain>   198.11.175.125   80      117s\n")),(0,a.kt)("p",null,"In the deployed application, we use rollout trait, which enables us to release 2 pods first for canary validation. After validation succeed, remove ",(0,a.kt)("inlineCode",{parentName:"p"},"batchPatition: 0")," in application configuration in the rollout trait. After that, a complete release will be fired. This mechanism greatly improves the security and stability of the releasing process. You can adjust the rollout strategy depending on you scenario."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl edit app -n kubevela-demo-namespace   \napplication.core.oam.dev/cicd-demo-app edited\n$ kubectl get deployment -n kubevela-demo-namespace\nNAME                       READY   UP-TO-DATE   AVAILABLE   AGE\nkubevela-demo-app-web-v1   5/5     5            5           4m16s\n$ curl http://<your domain>/\nVersion: 0.1.2\n")),(0,a.kt)("h2",{id:"more"},"More"),(0,a.kt)("p",null,"Refer to the ",(0,a.kt)("a",{parentName:"p",href:"/blog/kubevela-jenkins-cicd"},"blog post")," for more details about deploying Jenkins + KubeVela and more comprehensive demo for application rolling update."))}c.isMDXComponent=!0}}]);