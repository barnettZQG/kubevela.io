(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[608],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return d}});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||r;return t?o.createElement(h,i(i({ref:n},p),{},{components:t})):o.createElement(h,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8901:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l},default:function(){return p}});var o=t(2122),a=t(9756),r=(t(7294),t(3905)),i={title:"Component Delivery"},s={unversionedId:"end-user/component-delivery",id:"end-user/component-delivery",isDocsHomePage:!1,title:"Component Delivery",description:"Components are one of the core concepts of KubeVela. You can use them to build the most common types of services, such as a Web Service that provides external access, a Worker that runs scheduled tasks on the backend, or enables Redis and including OSS from Cloud Provider and so on.",source:"@site/docs/end-user/component-delivery.md",sourceDirName:"end-user",slug:"/end-user/component-delivery",permalink:"/docs/next/end-user/component-delivery",editUrl:"https://github.com/oam-dev/kubevela/edit/master/docs/en/end-user/component-delivery.md",version:"current",lastUpdatedBy:"Wei (\u6bb5\u5c11)",lastUpdatedAt:1630569250,formattedLastUpdatedAt:"9/2/2021",frontMatter:{title:"Component Delivery"},sidebar:"docs",previous:{title:"Application",permalink:"/docs/next/core-concepts/application"},next:{title:"Binding Traits",permalink:"/docs/next/end-user/binding-traits"}},l=[{value:"KubeVela&#39;s Component",id:"kubevelas-component",children:[]},{value:"Using Service-Based Components (Web Service)",id:"using-service-based-components-web-service",children:[]},{value:"Using Helm Component",id:"using-helm-component",children:[]},{value:"Using Kustomize Component",id:"using-kustomize-component",children:[]},{value:"Using Cloud Service Component",id:"using-cloud-service-component",children:[]},{value:"Custom Component",id:"custom-component",children:[]},{value:"Next",id:"next",children:[]}],c={toc:l};function p(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Components are one of the core concepts of KubeVela. You can use them to build the most common types of services, such as a Web Service that provides external access, a Worker that runs scheduled tasks on the backend, or enables Redis and including OSS from Cloud Provider and so on."),(0,r.kt)("p",null,'In order to help you quickly and comprehensively implement your business, KubeVela provides a large number of out-of-the-box component types, which not only include business components for conventional microservice scenarios, such as "service-oriented components" (webservice) and "back-end running components" (Worker), \u201cone-off task component\u201d (task), etc.'),(0,r.kt)("p",null,"KubeVela also include general-purpose components for different product categories in the community, such as the \u201cHelm component\u201d that supports Helm Chart, the \u201cKustomize component\u201d that supports Git Repo, etc. and at last it contains a series of commonly used cloud service components. If KubeVela's built-in component types cannot meet all your needs, KubeVela also has the ability to expand to almost any type of component products."),(0,r.kt)("h2",{id:"kubevelas-component"},"KubeVela's Component"),(0,r.kt)("p",null,"We use ",(0,r.kt)("a",{parentName:"p",href:"../getting-started/quick-install#3-get-kubevela-cli"},"KubeVela CLI")," to check out all the available Components:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ vela components\nNAME        NAMESPACE   WORKLOAD                                DESCRIPTION                                                            \nalibaba-ack vela-system configurations.terraform.core.oam.dev   Terraform configuration for Alibaba Cloud ACK cluster       \nalibaba-oss vela-system configurations.terraform.core.oam.dev   Terraform configuration for Alibaba Cloud OSS object        \nalibaba-rds vela-system configurations.terraform.core.oam.dev   Terraform configuration for Alibaba Cloud RDS object        \nhelm        vela-system autodetects.core.oam.dev                helm release is a group of K8s resources from either git    \n                                                                repository or helm repo                                     \nkustomize   vela-system autodetects.core.oam.dev                kustomize can fetching, building, updating and applying     \n                                                                Kustomize manifests from git repo.                          \nraw         vela-system autodetects.core.oam.dev                raw allow users to specify raw K8s object in properties     \ntask        vela-system jobs.batch                              Describes jobs that run code or a script to completion.     \nwebservice  vela-system deployments.apps                        Describes long-running, scalable, containerized services    \n                                                                that have a stable network endpoint to receive external     \n                                                                network traffic from customers.                             \nworker      vela-system deployments.apps                        Describes long-running, scalable, containerized services    \n                                                                that running at backend. They do NOT have network endpoint  \n                                                                to receive external network traffic.    \n")),(0,r.kt)("p",null,"Let's take several typical component types as example to introduce the usage of KubeVela component delivery. If you want to directly view how Cloud Services are used, please read ",(0,r.kt)("a",{parentName:"p",href:"./cloud-services"},"Integrated Cloud Service"),"."),(0,r.kt)("h2",{id:"using-service-based-components-web-service"},"Using Service-Based Components (Web Service)"),(0,r.kt)("p",null,"Service-oriented components are components that support external access to services with the container as the core, and their functions cover the needs of most of he microservice scenarios."),(0,r.kt)("p",null,"Please copy shell below and apply to the cluster:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'cat <<EOF | kubectl apply -f -\n# YAML begins\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: website\nspec:\n  components:\n    - name: frontend\n      type: webservice\n      properties:\n        image: oamdev/testapp:v1\n        cmd: ["node", "server.js"]\n        port: 8080\n        cpu: "0.1"\n        env:\n          - name: FOO\n            value: bar\n# YAML ends\nEOF\n')),(0,r.kt)("p",null,"You can also save the YAML file as website.yaml and use the ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl apply -f website.yaml")," command to deploy."),(0,r.kt)("p",null,"Next, check the deployment status of the application through ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl get application <application name> -o yaml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'$ kubectl get application website -o yaml\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: website\n  ... #  Omit non-critical information\nspec:\n  components:\n  - name: frontend\n    properties:\n      ... #  Omit non-critical information\n    type: webservice\nstatus:\n  conditions:\n  - lastTransitionTime: "2021-08-28T10:26:47Z"\n    reason: Available\n    status: "True"\n    ... #  Omit non-critical information\n    type: HealthCheck\n  observedGeneration: 1\n  ... #  Omit non-critical information\n  services:\n  - healthy: true\n    name: frontend\n    workloadDefinition:\n      apiVersion: apps/v1\n      kind: Deployment\n  status: running\n')),(0,r.kt)("p",null,"When we see that the ",(0,r.kt)("inlineCode",{parentName:"p"},"status.services.healthy")," field is true and the status is running, it means that the entire application is delivered successfully."),(0,r.kt)("p",null,"If status shows as rendering or healthy as false, it means that the application has either failed to deploy or is still being deployed. Please proceed according to the information returned in ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl get application <application name> -o yaml"),"."),(0,r.kt)("p",null,"You can also view through the CLI of vela, using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ vela ls\nAPP     COMPONENT   TYPE        TRAITS  PHASE   HEALTHY STATUS  CREATED-TIME                 \nwebsite frontend    webservice          running healthy         2021-08-28 18:26:47 +0800 CST\n")),(0,r.kt)("p",null,"We also see that the PHASE of the app is running and the STATUS is healthy."),(0,r.kt)("h2",{id:"using-helm-component"},"Using Helm Component"),(0,r.kt)("p",null,"KubeVela's Helm component meets the needs of users to connect to Helm Chart. You can deploy any ready-made Helm chart software package from Helm Repo, Git Repo or OSS bucket through the Helm component, and overwrite its parameters."),(0,r.kt)("p",null,"We use the Chart package deployment method from the Helm Repo to explain. In this ",(0,r.kt)("inlineCode",{parentName:"p"},"Application"),", we hope to deliver a component called redis-comp. It is a chart from the ",(0,r.kt)("a",{parentName:"p",href:"https://charts.bitnami.com/bitnami"},"bitnami"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cat <<EOF | kubectl apply -f -\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: app-delivering-chart\nspec:\n  components:\n    - name: redis-comp\n      type: helm\n      properties:\n        chart: redis-cluster\n        version: 6.2.7\n        url: https://charts.bitnami.com/bitnami\n        repoType: helm\nEOF\n")),(0,r.kt)("p",null,"Please copy the above code block and deploy it directly to the runtime cluster:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"application.core.oam.dev/app-delivering-chart created\n")),(0,r.kt)("p",null,"Finally, we use ",(0,r.kt)("inlineCode",{parentName:"p"},"vela ls")," to view the application status after successful delivery:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"APP                     COMPONENT   TYPE        TRAITS  PHASE   HEALTHY STATUS  CREATED-TIME                 \napp-delivering-chart    redis-comp  helm                running healthy         2021-08-28 18:48:21 +0800 CST\n")),(0,r.kt)("p",null,"We also see that the PHASE of the app-delivering-chart APP is running and the STATUS is healthy."),(0,r.kt)("p",null,"For usage examples of Git repositories and OSS buckets, and detailed configuration information about them, please go to ",(0,r.kt)("a",{parentName:"p",href:"../platform-engineers/components/built-in/helm"},"Built-in Components")," in the Admin's Guide."),(0,r.kt)("h2",{id:"using-kustomize-component"},"Using Kustomize Component"),(0,r.kt)("p",null,"KubeVela's ",(0,r.kt)("inlineCode",{parentName:"p"},"kustomize")," component meets the needs of users to directly connect Yaml files and folders as component products. No matter whether your Yaml file/folder is stored in a Git Repo or an OSS bucket, KubeVela can read and deliver it."),(0,r.kt)("p",null,"Let's take the YAML folder component from the OSS bucket registry as an example to explain the usage. In the ",(0,r.kt)("inlineCode",{parentName:"p"},"Application")," this time, I hope to deliver a component named bucket-comp. The deployment file corresponding to the component is stored in the cloud storage OSS bucket, and the corresponding bucket name is definition-registry. ",(0,r.kt)("inlineCode",{parentName:"p"},"kustomize.yaml")," comes from this address of oss-cn-beijing.aliyuncs.com and the path is ",(0,r.kt)("inlineCode",{parentName:"p"},"./app/prod/"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cat <<EOF | kubectl apply -f -\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: bucket-app\nspec:\n  components:\n    - name: bucket-comp\n      type: kustomize\n      properties:\n        repoType: oss\n        # If the bucket is private, you will need to provide\n        secretRef: bucket-secret\n        url: oss-cn-beijing.aliyuncs.com\n        oss:\n          bucketName: definition-registry\n        path: ./app/prod/\nEOF\n")),(0,r.kt)("p",null,"Please copy the above code block and deploy it directly to the runtime cluster:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"application.core.oam.dev/bucket-app created\n")),(0,r.kt)("p",null,"Finally, we use ",(0,r.kt)("inlineCode",{parentName:"p"},"vela ls")," to view the application status after successful delivery:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"vela ls\nAPP                     COMPONENT   TYPE        TRAITS  PHASE   HEALTHY STATUS  CREATED-TIME                 \nbucket-app              bucket-comp kustomize           running healthy         2021-08-28 18:53:14 +0800 CST\n")),(0,r.kt)("p",null,"The PHASE of the app is running, and the STATUS is healthy. Successful application deployment!"),(0,r.kt)("p",null,"For usage examples of Git repositories and their detailed configuration item information, please go to ",(0,r.kt)("a",{parentName:"p",href:"../platform-engineers/components/built-in/kustomize"},"Built-in Components")," in the Admin Guide."),(0,r.kt)("h2",{id:"using-cloud-service-component"},"Using Cloud Service Component"),(0,r.kt)("p",null,"Cloud Service components are also the core components supported by KubeVela. Cloud Services are often not used separately. Cloud Services such as databases and caches are often used after they are created. The relevant information is transferred to other components. At the same time, Cloud Services involve different cloud vendors, and Some authentication-related preparations will be explained independently in the chapter ",(0,r.kt)("a",{parentName:"p",href:"./cloud-services"},"Integrated Cloud Services"),"."),(0,r.kt)("h2",{id:"custom-component"},"Custom Component"),(0,r.kt)("p",null,"When none of the above KubeVela's built-in unpacking components can meet your needs, don\u2019t worry, KubeVela provides powerful expansion capabilities and can be connected to almost any type of component form. You can check the ",(0,r.kt)("a",{parentName:"p",href:"../platform-engineers/components/custom-component"},"custom components")," in the Admin Guide to Learn about how to use CUE and Kubernetes to extend KubeVela's component types."),(0,r.kt)("h2",{id:"next"},"Next"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Visit the ",(0,r.kt)("a",{parentName:"li",href:"./cloud-services"},"Integrated Cloud Services")," document to master the Cloud Service integration methods of different types and different vendors"),(0,r.kt)("li",{parentName:"ul"},"Visit the ",(0,r.kt)("a",{parentName:"li",href:"./binding-traits"},"Binding Trait")," document to master how to bind the operation and maintenance actions and strategies you need to the component")))}p.isMDXComponent=!0}}]);