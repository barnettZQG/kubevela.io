(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[3555],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?o.createElement(f,i(i({ref:t},c),{},{components:n})):o.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},25898:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s},default:function(){return c}});var o=n(22122),a=n(19756),r=(n(67294),n(3905)),i={title:"Application"},l={unversionedId:"core-concepts/application",id:"core-concepts/application",isDocsHomePage:!1,title:"Application",description:"KubeVela takes Application as the basis of modeling, uses Components and Traits to complete a set of application deployment plans. After you are familiar with these core concepts, you can develop in accordance with the user manual and administrator manual according to your needs.",source:"@site/docs/core-concepts/application.md",sourceDirName:"core-concepts",slug:"/core-concepts/application",permalink:"/docs/next/core-concepts/application",editUrl:"https://github.com/oam-dev/kubevela.io/edit/main/docs/core-concepts/application.md",version:"current",lastUpdatedBy:"Lei Zhang (Harry)",lastUpdatedAt:1632276365,formattedLastUpdatedAt:"9/22/2021",frontMatter:{title:"Application"},sidebar:"docs",previous:{title:"Architecture",permalink:"/docs/next/core-concepts/architecture"},next:{title:"Jenkins CI/CD",permalink:"/docs/next/case-studies/jenkins-cicd"}},s=[{value:"Application",id:"application",children:[]},{value:"Components",id:"components",children:[]},{value:"Traits",id:"traits",children:[]},{value:"Policy",id:"policy",children:[]},{value:"Workflow",id:"workflow",children:[]},{value:"What&#39;s Next",id:"whats-next",children:[]}],p={toc:s};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"KubeVela takes Application as the basis of modeling, uses Components and Traits to complete a set of application deployment plans. After you are familiar with these core concepts, you can develop in accordance with the user manual and administrator manual according to your needs."),(0,r.kt)("h2",{id:"application"},"Application"),(0,r.kt)("p",null,"In modeling, the YAML file is the bearer of the application deployment plan. A typical YAML example is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# sample.yaml\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: website\nspec:\n  components:\n    - name: frontend              # e.g. we want to deploy a frontend component and serves as web service\n      type: webservice\n      properties:\n        image: nginx\n      traits:\n        - type: cpuscaler         # e.g. we add a CPU based auto scaler to this component\n          properties:\n            min: 1\n            max: 10\n            cpuPercent: 60\n        - type: sidecar           # add a sidecar container into this component\n          properties:\n            name: "sidecar-test"\n            image: "fluentd"\n    - name: backend\n      type: worker\n      properties:\n        image: busybox\n        cmd:\n          - sleep\n          - \'1000\'\n  policies:\n    - name: demo-policy\n      type: env-binding\n      properties:\n        envs:\n          - name: test\n            placement:\n              clusterSelector:\n                name: cluster-test\n          - name: prod\n            placement:\n              clusterSelector:\n                name: cluster-prod\n  workflow:\n    steps:\n      #workflow step name\n      - name: deploy-test-env\n        type: deploy2env\n        properties:\n          # Specify the policy name\n          policy: demo-policy\n          # Specify the env name in the policy\n          env: test    \n      - name: manual-approval\n        # use suspend can stop workflow and wait here until condition changed\n        type: suspend\n      - name: deploy-prod-env\n        type: deploy2env\n        properties:\n          # Specify the policy name\n          policy: demo-policy\n          # Specify the env name in the policy\n          env: prod    \n')),(0,r.kt)("p",null,"The fields here correspond to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"apiVersion: The OAM API version used."),(0,r.kt)("li",{parentName:"ul"},"kind: of CRD Resourse Type. The one we use most often is Pod."),(0,r.kt)("li",{parentName:"ul"},"metadata: business-related information. For example, this time I want to create a website."),(0,r.kt)("li",{parentName:"ul"},"Spec: Describe what we need to deliver and tell Kubernetes what to make. Here we put the ",(0,r.kt)("inlineCode",{parentName:"li"},"components"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"policies")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"workflow")," of KubeVela."),(0,r.kt)("li",{parentName:"ul"},"components: KubeVela's component system."),(0,r.kt)("li",{parentName:"ul"},"Traits: KubeVela's operation and maintenance feature system, works in component level."),(0,r.kt)("li",{parentName:"ul"},"Policies: KubeVela's application level policy."),(0,r.kt)("li",{parentName:"ul"},"Workflow: KubeVela's application level deployment workflow, you can custom every deployment step with it.")),(0,r.kt)("h2",{id:"components"},"Components"),(0,r.kt)("p",null,"KubeVela has some built-in component types, you can find them by using ",(0,r.kt)("a",{parentName:"p",href:"../install#3-get-kubevela-cli"},"KubeVela CLI"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"vela components \n")),(0,r.kt)("p",null,"The output shows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NAME            NAMESPACE   WORKLOAD                                DESCRIPTION\nhelm            vela-system autodetects.core.oam.dev                helm release is a group of K8s resources from either git\n                                                                    repository or helm repo\nkustomize       vela-system autodetects.core.oam.dev                kustomize can fetching, building, updating and applying\n                                                                    Kustomize manifests from git repo.\ntask            vela-system jobs.batch                              Describes jobs that run code or a script to completion.\nwebservice      vela-system deployments.apps                        Describes long-running, scalable, containerized services\n                                                                    that have a stable network endpoint to receive external\n                                                                    network traffic from customers.\nworker          vela-system deployments.apps                        Describes long-running, scalable, containerized services\n                                                                    that running at backend. They do NOT have network endpoint\n                                                                    to receive external network traffic.                    \nalibaba-ack     vela-system configurations.terraform.core.oam.dev   Terraform configuration for Alibaba Cloud ACK cluster\nalibaba-oss     vela-system configurations.terraform.core.oam.dev   Terraform configuration for Alibaba Cloud OSS object\nalibaba-rds     vela-system configurations.terraform.core.oam.dev   Terraform configuration for Alibaba Cloud RDS object\n")),(0,r.kt)("p",null,"You can continue to use ",(0,r.kt)("a",{parentName:"p",href:"../end-user/components/helm"},"Helm")," and ",(0,r.kt)("a",{parentName:"p",href:"../end-user/components/kustomize"},"Kustomize")," components to deploy your application, an application is a deployment plan."),(0,r.kt)("p",null,"If you're a platform builder who's familiar with Kubernetes, you can learn to ",(0,r.kt)("a",{parentName:"p",href:"../platform-engineers/components/custom-component"},"define your custom component")," to extend every kind of component in KubeVela. Especially, ",(0,r.kt)("a",{parentName:"p",href:"../platform-engineers/components/component-terraform"},"Terraform Components")," is one of the best practice."),(0,r.kt)("h2",{id:"traits"},"Traits"),(0,r.kt)("p",null,"KubeVela also has many built-in traits, search them by using ",(0,r.kt)("a",{parentName:"p",href:"../install#3-get-kubevela-cli"},"KubeVela CLI"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"vela traits \n")),(0,r.kt)("p",null,"The result can be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NAME        NAMESPACE   APPLIES-TO          CONFLICTS-WITH  POD-DISRUPTIVE  DESCRIPTION                                          \nannotations vela-system deployments.apps                    true            Add annotations for your Workload.                   \ncpuscaler   vela-system webservice,worker                   false           Automatically scale the component based on CPU usage.\ningress     vela-system webservice,worker                   false           Enable public web traffic for the component.         \nlabels      vela-system deployments.apps                    true            Add labels for your Workload.                        \nscaler      vela-system webservice,worker                   false           Manually scale the component.                        \nsidecar     vela-system deployments.apps                    true            Inject a sidecar container to the component.   \n")),(0,r.kt)("p",null,"You can learn how to bind trait by these detail docs, such as ",(0,r.kt)("a",{parentName:"p",href:"../end-user/traits/ingress"},"ingress trait"),"."),(0,r.kt)("p",null,"If you're a platform builder who's familiar with Kubernetes, you can learn to ",(0,r.kt)("a",{parentName:"p",href:"../platform-engineers/traits/customize-trait"},"define your custom trait")," to extend any operational capability for your users."),(0,r.kt)("h2",{id:"policy"},"Policy"),(0,r.kt)("p",null,"Policy allows you to define application level capabilities, such as health check, security group, fire wall, SLO and so on."),(0,r.kt)("p",null,"Policy is similar to trait, but trait works for component while policy works for the whole application."),(0,r.kt)("h2",{id:"workflow"},"Workflow"),(0,r.kt)("p",null,"In KubeVela, Workflow allows user to glue various operation and maintenance tasks into one process, and achieve automated and rapid delivery of cloud-native applications to any hybrid environment. From the design point of view, the Workflow is to customize the control logic: not only simply apply all resources, but also to provide some process-oriented flexibility. For example, the use of Workflow can help us implement complex operations such as pause, manual verification, waiting state, data flow transmission, multi-environment grayscale, and A/B testing."),(0,r.kt)("p",null,'The Workflow is based on modular design. Each Workflow module is defined by a Definition CRD and provided to users for operation through K8s API. As a "super glue", the Workflow module can combine any of your tools and processes through the CUE language. This allows you to create your own modules through a powerful declarative language and cloud-native APIs.'),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Especially, workflow works in application level, if you specify workflow, the resources won't be deployed if you don't specify any step to deploy it.")),(0,r.kt)("p",null,"If you're a platform builder who's familiar with Kubernetes, you can learn to ",(0,r.kt)("a",{parentName:"p",href:"../platform-engineers/workflow/workflow"},"define your own workflow step by using CUE"),"."),(0,r.kt)("h2",{id:"whats-next"},"What's Next"),(0,r.kt)("p",null,"Here are some recommended next steps:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Learn KubeVela's user guide to know how to deploy component, let's start from ",(0,r.kt)("a",{parentName:"li",href:"../end-user/components/helm"},"helm component"),"."),(0,r.kt)("li",{parentName:"ul"},"Learn KubeVela's admin guide to learn more about ",(0,r.kt)("a",{parentName:"li",href:"../platform-engineers/oam/oam-model"},"the OAM model"),".")))}c.isMDXComponent=!0}}]);