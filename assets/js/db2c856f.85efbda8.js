(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[5636],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},93866:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s},default:function(){return u}});var r=n(22122),o=n(19756),a=(n(67294),n(3905)),i={title:"Architecture"},l={unversionedId:"core-concepts/architecture",id:"version-v1.1/core-concepts/architecture",isDocsHomePage:!1,title:"Architecture",description:"The overall architecture of KubeVela is shown as below:",source:"@site/versioned_docs/version-v1.1/core-concepts/architecture.md",sourceDirName:"core-concepts",slug:"/core-concepts/architecture",permalink:"/docs/core-concepts/architecture",editUrl:"https://github.com/oam-dev/kubevela/edit/master/docs/en/core-concepts/architecture.md",version:"v1.1",lastUpdatedBy:"yangsoon",lastUpdatedAt:1631690672,formattedLastUpdatedAt:"9/15/2021",frontMatter:{title:"Architecture"},sidebar:"version-v1.1/docs",previous:{title:"Deploy First Application",permalink:"/docs/quick-start"},next:{title:"Application",permalink:"/docs/core-concepts/application"}},s=[{value:"API",id:"api",children:[]},{value:"Control Plane",id:"control-plane",children:[]},{value:"Execution",id:"execution",children:[]},{value:"What&#39;s Next",id:"whats-next",children:[]}],c={toc:s};function u(e){var t=e.components,i=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The overall architecture of KubeVela is shown as below:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"alt",src:n(51810).Z})),(0,a.kt)("h2",{id:"api"},"API"),(0,a.kt)("p",null,"The API layer provides KubeVela APIs exposed to users for building application delivery platform and solutions.\nKubeVela APIs are declarative and application centric.\nIt is based on Kubernetes CRDs to natively fit into the Kubernetes ecosystem."),(0,a.kt)("p",null,"The APIs can be categorized for two purposes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"For ",(0,a.kt)("strong",{parentName:"li"},"end users")," to compose final application manifest to deploy.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Usually this contains only user-concerned config and hides infrastructure details."),(0,a.kt)("li",{parentName:"ul"},"Users will normally write the manifest in yaml format."),(0,a.kt)("li",{parentName:"ul"},"This currently includes Application only. But we may add more user-facing APIs, e.g. ApplicationSet to define multiple Applications."))),(0,a.kt)("li",{parentName:"ul"},"For ",(0,a.kt)("strong",{parentName:"li"},"platform admins")," to define capability definitions to handle actual operations.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Each definition glues operational tasks using CUE and exposes user-concerned config only."),(0,a.kt)("li",{parentName:"ul"},"Admins will normally write the manifest in yaml + CUE format."),(0,a.kt)("li",{parentName:"ul"},"This currently includes Component, Trait, Policy, and Workflow definition types.")))),(0,a.kt)("p",null,"The APIs are served by the control plane.\nBecause it is so important that we put a separate section to talk about it."),(0,a.kt)("h2",{id:"control-plane"},"Control Plane"),(0,a.kt)("p",null,"The control plane layers is where KubeVela puts the components central to the entire system.\nIt is the first entry to handle user API requests, the central place to register plugins,\nand central processor to manage global states and dispatches tasks/resources."),(0,a.kt)("p",null,"The control plane contains three major parts:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Plugin registry")," stores and manages X-Definitions.\nX-Definitions are CRDs that users can apply and get via kubectl.\nThere are additional backend functions to store and manage multiple versions of X-Definitions."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Core Control")," provides the core control logic to the entire system.\nIt consists of the core components that are hanlding Application, X-Definition API requests,\norchestrating Workflows, storing revisions of Applications and Components,\nparsing and executing CUE fields, garbage collecting unused resources."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Builtin Controllers")," registers builtin plugins and provides the backing controllers for the resources\ncreated by X-Definitions. These are core to the KubeVela ecosystem that we believe everyone will use.")),(0,a.kt)("p",null,"The control plane (including API layer) is KubeVela per se.\nTechnically speaking, KubeVela is a control plane to manage applications over multiple clusters, hybrid environments."),(0,a.kt)("h2",{id:"execution"},"Execution"),(0,a.kt)("p",null,"The execution layer is where the applications are actually running on.\nKubeVela allows you to deploy and manage application resources in a consistent workflow onto both\nKubernetes cluster (e.g. local, managed offerings, IoT/edge, on-prem)\nand non-Kubernetes environments on clouds.\nKubeVela itself does not run on the execution infrastructures, but manage them instead."),(0,a.kt)("h2",{id:"whats-next"},"What's Next"),(0,a.kt)("p",null,"Here are some recommended next steps:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Learn KubeVela's Application to know the basics of how to building App Delivery, let's start from ",(0,a.kt)("a",{parentName:"li",href:"./application"},"Application"),"."),(0,a.kt)("li",{parentName:"ul"},"Learn KubeVela's admin guide to learn more about ",(0,a.kt)("a",{parentName:"li",href:"../platform-engineers/oam/oam-model"},"the OAM model"),".")))}u.isMDXComponent=!0},51810:function(e,t,n){"use strict";t.Z=n.p+"assets/images/system-arch-f0b52b0ce390bd1e35a961924ef33b50.png"}}]);